% This file was created with Citavi 6.12.0.0

@misc{Dharmkar.25.05.2022,
 abstract = {How can I create a directory if it does not exist using Python? - To create a directory, first check if it already exists using os.path.exists(directory). Then  ...},
 author = {Dharmkar, Rajendra},
 year = {25.05.2022},
 title = {How can I create a directory if it does not exist using Python?},
 url = {\url{https://www.tutorialspoint.com/How-can-I-create-a-directory-if-it-does-not-exist-using-Python}},
 urldate = {26.05.2022}
}


@misc{linuxtut.com.2020,
 abstract = {Python, machine learning, images, datasets, icrawler},
 author = {linuxtut.com},
 year = {2020},
 title = {Made icrawler easier to use for machine learning data collection},
 url = {\url{https://linuxtut.com/en/64deae619f62ddb61558/}},
 urldate = {26.05.2022}
}


@misc{RTD.2022,
 abstract = {I'm attempting to create an isolated virtual environment running tensorflow {\&} tf2onnx using a jupyter notebook in vscode.

The tf2onnx packge recommends python 3.7, and my local 3.7.9 version usually works well with tensorflow projects, so I have local and global versions set to 3.7.9 using pyenv.

The following is my setup procedure:

python -m venv .venv

Then after starting a new terminal in vscode:

pip install tensorflow==2.7.0

pip freeze {\textgreater} requirements.txt

After this, in a cell in my jupyter notebook, the following line fails

import tensorflow.keras as keras

Exception:

TypeError: Descriptors cannot not be created directly.

If this call came from a {\_}pb2.py file, your generated code is out of date and must be

regenerated with protoc {\textgreater}= 3.19.0.

If you cannot immediately regenerate your protos, some other possible workarounds are:

1. Downgrade the protobuf package to 3.20.x or lower.

2. Set PROTOCOL{\_}BUFFERS{\_}PYTHON{\_}IMPLEMENTATION=python (but this will use pure-Python

parsing and will be much slower).

At this point, the protobuf package version is showing as v4.21.0 in my requirements file.  I've attempted to pre-install the 3.20.1 version into the virtual environment before installing tensorflow but this yields no effect.

Here is the full requirements file after installing tensorflow:

absl-py==1.0.0

astunparse==1.6.3

cachetools==5.1.0

certifi==2022.5.18.1

charset-normalizer==2.0.12

flatbuffers==2.0

gast==0.4.0

google-auth==2.6.6

google-auth-oauthlib==0.4.6

google-pasta==0.2.0

grpcio==1.46.3

h5py==3.7.0

idna==3.3

importlib-metadata==4.11.4

keras==2.7.0

Keras-Preprocessing==1.1.2

libclang==14.0.1

Markdown==3.3.7

numpy==1.21.6

oauthlib==3.2.0

opt-einsum==3.3.0

protobuf==4.21.0

pyasn1==0.4.8

pyasn1-modules==0.2.8

requests==2.27.1

requests-oauthlib==1.3.1

rsa==4.8

six==1.16.0

tensorboard==2.9.0

tensorboard-data-server==0.6.1

tensorboard-plugin-wit==1.8.1

tensorflow==2.7.0

tensorflow-estimator==2.7.0

tensorflow-io-gcs-filesystem==0.26.0

termcolor==1.1.0

typing-extensions==4.2.0

urllib3==1.26.9

Werkzeug==2.1.2

wrapt==1.14.1

zipp==3.8.0},
 author = {RTD},
 year = {2022},
 title = {Jupyter notebook in vscode with virtual environment fails to import tensorflow},
 url = {\url{https://stackoverflow.com/questions/72411825/jupyter-notebook-in-vscode-with-virtual-environment-fails-to-import-tensorflow}},
 urldate = {31.05.2022}
}


@misc{StackVidhya.2021,
 abstract = {In this tutorial, you'll learn the different methods available in python to check if file exists. You'll also learn how to use the different methods in different usecases to check the file existence.},
 author = {{Stack Vidhya}},
 year = {2021},
 title = {How To Check If File Exists In Python?},
 url = {\url{https://www.stackvidhya.com/check-if-file-exists-in-python/}},
 urldate = {26.05.2022}
}


@misc{steviesblog.de.2021,
 abstract = {Eigenen Python Imager Crawler basteln. Bilder automatisch in der Suchmaschine suchen und herunterladen lassen. Mit Beispiel},
 author = {steviesblog.de},
 year = {2021},
 title = {Image Crawler Python},
 url = {\url{https://steviesblog.de/blog/2021/02/15/image-crawling-python/}},
 urldate = {26.05.2022}
}


@misc{Wikipedia.2022,
 abstract = {K{\"u}nstliche neuronale Netze, auch k{\"u}nstliche neuronale Netzwerke, kurz: KNN (englisch artificial neural network, ANN), sind Netze aus k{\"u}nstlichen Neuronen. Sie sind Forschungsgegenstand der Neuroinformatik und stellen einen Zweig der k{\"u}nstlichen Intelligenz dar.

K{\"u}nstliche neuronale Netze haben, ebenso wie k{\"u}nstliche Neuronen, ein biologisches Vorbild. Man stellt sie nat{\"u}rlichen neuronalen Netzen gegen{\"u}ber, die eine Vernetzung von Neuronen im Nervensystem eines Lebewesens darstellen. Bei KNNs geht es allerdings mehr um eine Abstraktion (Modellbildung) von Informationsverarbeitung, weniger um das Nachbilden biologischer neuronaler Netze und Neuronen, was eher Gegenstand der Computational Neuroscience ist. Es ist jedoch zu beobachten, dass die Grenzen zwischen diesen Teildisziplinen zunehmend verschwinden, was auf die nach wie vor gro{\ss}e Dynamik und Interdisziplinarit{\"a}t dieses Forschungszweigs zur{\"u}ckzuf{\"u}hren ist. Aus der Biologie motiviert ist die Modellierung mittlerweile so gut, dass viele Aufgabenstellungen wesentlich besser als vom Menschen erledigt werden.},
 editor = {Wikipedia},
 year = {2022},
 title = {K{\"u}nstliches neuronales Netz},
 url = {\url{https://de.wikipedia.org/w/index.php?title=Künstliches_neuronales_Netz&oldid=222521209}},
 urldate = {06.06.2022},
 doi = {\url{Page}}
}


